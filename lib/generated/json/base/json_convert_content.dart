// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wefinex/repository/model/xoso_entity.dart';
import 'package:wefinex/generated/json/xoso_entity_helper.dart';
import 'package:wefinex/repository/model/bong_da_entity.dart';
import 'package:wefinex/generated/json/bong_da_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case XosoEntity:
				return xosoEntityFromJson(data as XosoEntity, json) as T;
			case BongDaEntity:
				return bongDaEntityFromJson(data as BongDaEntity, json) as T;
			case BongDaFilters:
				return bongDaFiltersFromJson(data as BongDaFilters, json) as T;
			case BongDaCompetitions:
				return bongDaCompetitionsFromJson(data as BongDaCompetitions, json) as T;
			case BongDaCompetitionsArea:
				return bongDaCompetitionsAreaFromJson(data as BongDaCompetitionsArea, json) as T;
			case BongDaCompetitionsCurrentSeason:
				return bongDaCompetitionsCurrentSeasonFromJson(data as BongDaCompetitionsCurrentSeason, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case XosoEntity:
				return xosoEntityToJson(data as XosoEntity);
			case BongDaEntity:
				return bongDaEntityToJson(data as BongDaEntity);
			case BongDaFilters:
				return bongDaFiltersToJson(data as BongDaFilters);
			case BongDaCompetitions:
				return bongDaCompetitionsToJson(data as BongDaCompetitions);
			case BongDaCompetitionsArea:
				return bongDaCompetitionsAreaToJson(data as BongDaCompetitionsArea);
			case BongDaCompetitionsCurrentSeason:
				return bongDaCompetitionsCurrentSeasonToJson(data as BongDaCompetitionsCurrentSeason);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (XosoEntity).toString()){
			return XosoEntity().fromJson(json);
		}	else if(type == (BongDaEntity).toString()){
			return BongDaEntity().fromJson(json);
		}	else if(type == (BongDaFilters).toString()){
			return BongDaFilters().fromJson(json);
		}	else if(type == (BongDaCompetitions).toString()){
			return BongDaCompetitions().fromJson(json);
		}	else if(type == (BongDaCompetitionsArea).toString()){
			return BongDaCompetitionsArea().fromJson(json);
		}	else if(type == (BongDaCompetitionsCurrentSeason).toString()){
			return BongDaCompetitionsCurrentSeason().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<XosoEntity>[] is M){
			return data.map<XosoEntity>((e) => XosoEntity().fromJson(e)).toList() as M;
		}	else if(<BongDaEntity>[] is M){
			return data.map<BongDaEntity>((e) => BongDaEntity().fromJson(e)).toList() as M;
		}	else if(<BongDaFilters>[] is M){
			return data.map<BongDaFilters>((e) => BongDaFilters().fromJson(e)).toList() as M;
		}	else if(<BongDaCompetitions>[] is M){
			return data.map<BongDaCompetitions>((e) => BongDaCompetitions().fromJson(e)).toList() as M;
		}	else if(<BongDaCompetitionsArea>[] is M){
			return data.map<BongDaCompetitionsArea>((e) => BongDaCompetitionsArea().fromJson(e)).toList() as M;
		}	else if(<BongDaCompetitionsCurrentSeason>[] is M){
			return data.map<BongDaCompetitionsCurrentSeason>((e) => BongDaCompetitionsCurrentSeason().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}