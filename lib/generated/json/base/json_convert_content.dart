// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wefinex/repository/model/coin_entity.dart';
import 'package:wefinex/generated/json/coin_entity_helper.dart';
import 'package:wefinex/repository/model/xoso_entity.dart';
import 'package:wefinex/generated/json/xoso_entity_helper.dart';
import 'package:wefinex/repository/model/bong_da_entity.dart';
import 'package:wefinex/generated/json/bong_da_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case CoinEntity:
				return coinEntityFromJson(data as CoinEntity, json) as T;
			case CoinMetaData:
				return coinMetaDataFromJson(data as CoinMetaData, json) as T;
			case CoinSponsoredData:
				return coinSponsoredDataFromJson(data as CoinSponsoredData, json) as T;
			case CoinSponsoredDataCoinInfo:
				return coinSponsoredDataCoinInfoFromJson(data as CoinSponsoredDataCoinInfo, json) as T;
			case CoinSponsoredDataCoinInfoRating:
				return coinSponsoredDataCoinInfoRatingFromJson(data as CoinSponsoredDataCoinInfoRating, json) as T;
			case CoinSponsoredDataCoinInfoRatingWeiss:
				return coinSponsoredDataCoinInfoRatingWeissFromJson(data as CoinSponsoredDataCoinInfoRatingWeiss, json) as T;
			case CoinSponsoredDataRAW:
				return coinSponsoredDataRAWFromJson(data as CoinSponsoredDataRAW, json) as T;
			case CoinSponsoredDataRAWUSD:
				return coinSponsoredDataRAWUSDFromJson(data as CoinSponsoredDataRAWUSD, json) as T;
			case CoinSponsoredDataDISPLAY:
				return coinSponsoredDataDISPLAYFromJson(data as CoinSponsoredDataDISPLAY, json) as T;
			case CoinSponsoredDataDISPLAYUSD:
				return coinSponsoredDataDISPLAYUSDFromJson(data as CoinSponsoredDataDISPLAYUSD, json) as T;
			case CoinData:
				return coinDataFromJson(data as CoinData, json) as T;
			case CoinDataCoinInfo:
				return coinDataCoinInfoFromJson(data as CoinDataCoinInfo, json) as T;
			case CoinDataCoinInfoRating:
				return coinDataCoinInfoRatingFromJson(data as CoinDataCoinInfoRating, json) as T;
			case CoinDataCoinInfoRatingWeiss:
				return coinDataCoinInfoRatingWeissFromJson(data as CoinDataCoinInfoRatingWeiss, json) as T;
			case CoinDataRAW:
				return coinDataRAWFromJson(data as CoinDataRAW, json) as T;
			case CoinDataRAWUSD:
				return coinDataRAWUSDFromJson(data as CoinDataRAWUSD, json) as T;
			case CoinDataDISPLAY:
				return coinDataDISPLAYFromJson(data as CoinDataDISPLAY, json) as T;
			case CoinDataDISPLAYUSD:
				return coinDataDISPLAYUSDFromJson(data as CoinDataDISPLAYUSD, json) as T;
			case CoinRateLimit:
				return coinRateLimitFromJson(data as CoinRateLimit, json) as T;
			case XosoEntity:
				return xosoEntityFromJson(data as XosoEntity, json) as T;
			case BongDaEntity:
				return bongDaEntityFromJson(data as BongDaEntity, json) as T;
			case BongDaFilters:
				return bongDaFiltersFromJson(data as BongDaFilters, json) as T;
			case BongDaCompetitions:
				return bongDaCompetitionsFromJson(data as BongDaCompetitions, json) as T;
			case BongDaCompetitionsArea:
				return bongDaCompetitionsAreaFromJson(data as BongDaCompetitionsArea, json) as T;
			case BongDaCompetitionsCurrentSeason:
				return bongDaCompetitionsCurrentSeasonFromJson(data as BongDaCompetitionsCurrentSeason, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case CoinEntity:
				return coinEntityToJson(data as CoinEntity);
			case CoinMetaData:
				return coinMetaDataToJson(data as CoinMetaData);
			case CoinSponsoredData:
				return coinSponsoredDataToJson(data as CoinSponsoredData);
			case CoinSponsoredDataCoinInfo:
				return coinSponsoredDataCoinInfoToJson(data as CoinSponsoredDataCoinInfo);
			case CoinSponsoredDataCoinInfoRating:
				return coinSponsoredDataCoinInfoRatingToJson(data as CoinSponsoredDataCoinInfoRating);
			case CoinSponsoredDataCoinInfoRatingWeiss:
				return coinSponsoredDataCoinInfoRatingWeissToJson(data as CoinSponsoredDataCoinInfoRatingWeiss);
			case CoinSponsoredDataRAW:
				return coinSponsoredDataRAWToJson(data as CoinSponsoredDataRAW);
			case CoinSponsoredDataRAWUSD:
				return coinSponsoredDataRAWUSDToJson(data as CoinSponsoredDataRAWUSD);
			case CoinSponsoredDataDISPLAY:
				return coinSponsoredDataDISPLAYToJson(data as CoinSponsoredDataDISPLAY);
			case CoinSponsoredDataDISPLAYUSD:
				return coinSponsoredDataDISPLAYUSDToJson(data as CoinSponsoredDataDISPLAYUSD);
			case CoinData:
				return coinDataToJson(data as CoinData);
			case CoinDataCoinInfo:
				return coinDataCoinInfoToJson(data as CoinDataCoinInfo);
			case CoinDataCoinInfoRating:
				return coinDataCoinInfoRatingToJson(data as CoinDataCoinInfoRating);
			case CoinDataCoinInfoRatingWeiss:
				return coinDataCoinInfoRatingWeissToJson(data as CoinDataCoinInfoRatingWeiss);
			case CoinDataRAW:
				return coinDataRAWToJson(data as CoinDataRAW);
			case CoinDataRAWUSD:
				return coinDataRAWUSDToJson(data as CoinDataRAWUSD);
			case CoinDataDISPLAY:
				return coinDataDISPLAYToJson(data as CoinDataDISPLAY);
			case CoinDataDISPLAYUSD:
				return coinDataDISPLAYUSDToJson(data as CoinDataDISPLAYUSD);
			case CoinRateLimit:
				return coinRateLimitToJson(data as CoinRateLimit);
			case XosoEntity:
				return xosoEntityToJson(data as XosoEntity);
			case BongDaEntity:
				return bongDaEntityToJson(data as BongDaEntity);
			case BongDaFilters:
				return bongDaFiltersToJson(data as BongDaFilters);
			case BongDaCompetitions:
				return bongDaCompetitionsToJson(data as BongDaCompetitions);
			case BongDaCompetitionsArea:
				return bongDaCompetitionsAreaToJson(data as BongDaCompetitionsArea);
			case BongDaCompetitionsCurrentSeason:
				return bongDaCompetitionsCurrentSeasonToJson(data as BongDaCompetitionsCurrentSeason);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (CoinEntity).toString()){
			return CoinEntity().fromJson(json);
		}	else if(type == (CoinMetaData).toString()){
			return CoinMetaData().fromJson(json);
		}	else if(type == (CoinSponsoredData).toString()){
			return CoinSponsoredData().fromJson(json);
		}	else if(type == (CoinSponsoredDataCoinInfo).toString()){
			return CoinSponsoredDataCoinInfo().fromJson(json);
		}	else if(type == (CoinSponsoredDataCoinInfoRating).toString()){
			return CoinSponsoredDataCoinInfoRating().fromJson(json);
		}	else if(type == (CoinSponsoredDataCoinInfoRatingWeiss).toString()){
			return CoinSponsoredDataCoinInfoRatingWeiss().fromJson(json);
		}	else if(type == (CoinSponsoredDataRAW).toString()){
			return CoinSponsoredDataRAW().fromJson(json);
		}	else if(type == (CoinSponsoredDataRAWUSD).toString()){
			return CoinSponsoredDataRAWUSD().fromJson(json);
		}	else if(type == (CoinSponsoredDataDISPLAY).toString()){
			return CoinSponsoredDataDISPLAY().fromJson(json);
		}	else if(type == (CoinSponsoredDataDISPLAYUSD).toString()){
			return CoinSponsoredDataDISPLAYUSD().fromJson(json);
		}	else if(type == (CoinData).toString()){
			return CoinData().fromJson(json);
		}	else if(type == (CoinDataCoinInfo).toString()){
			return CoinDataCoinInfo().fromJson(json);
		}	else if(type == (CoinDataCoinInfoRating).toString()){
			return CoinDataCoinInfoRating().fromJson(json);
		}	else if(type == (CoinDataCoinInfoRatingWeiss).toString()){
			return CoinDataCoinInfoRatingWeiss().fromJson(json);
		}	else if(type == (CoinDataRAW).toString()){
			return CoinDataRAW().fromJson(json);
		}	else if(type == (CoinDataRAWUSD).toString()){
			return CoinDataRAWUSD().fromJson(json);
		}	else if(type == (CoinDataDISPLAY).toString()){
			return CoinDataDISPLAY().fromJson(json);
		}	else if(type == (CoinDataDISPLAYUSD).toString()){
			return CoinDataDISPLAYUSD().fromJson(json);
		}	else if(type == (CoinRateLimit).toString()){
			return CoinRateLimit().fromJson(json);
		}	else if(type == (XosoEntity).toString()){
			return XosoEntity().fromJson(json);
		}	else if(type == (BongDaEntity).toString()){
			return BongDaEntity().fromJson(json);
		}	else if(type == (BongDaFilters).toString()){
			return BongDaFilters().fromJson(json);
		}	else if(type == (BongDaCompetitions).toString()){
			return BongDaCompetitions().fromJson(json);
		}	else if(type == (BongDaCompetitionsArea).toString()){
			return BongDaCompetitionsArea().fromJson(json);
		}	else if(type == (BongDaCompetitionsCurrentSeason).toString()){
			return BongDaCompetitionsCurrentSeason().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<CoinEntity>[] is M){
			return data.map<CoinEntity>((e) => CoinEntity().fromJson(e)).toList() as M;
		}	else if(<CoinMetaData>[] is M){
			return data.map<CoinMetaData>((e) => CoinMetaData().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredData>[] is M){
			return data.map<CoinSponsoredData>((e) => CoinSponsoredData().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataCoinInfo>[] is M){
			return data.map<CoinSponsoredDataCoinInfo>((e) => CoinSponsoredDataCoinInfo().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataCoinInfoRating>[] is M){
			return data.map<CoinSponsoredDataCoinInfoRating>((e) => CoinSponsoredDataCoinInfoRating().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataCoinInfoRatingWeiss>[] is M){
			return data.map<CoinSponsoredDataCoinInfoRatingWeiss>((e) => CoinSponsoredDataCoinInfoRatingWeiss().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataRAW>[] is M){
			return data.map<CoinSponsoredDataRAW>((e) => CoinSponsoredDataRAW().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataRAWUSD>[] is M){
			return data.map<CoinSponsoredDataRAWUSD>((e) => CoinSponsoredDataRAWUSD().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataDISPLAY>[] is M){
			return data.map<CoinSponsoredDataDISPLAY>((e) => CoinSponsoredDataDISPLAY().fromJson(e)).toList() as M;
		}	else if(<CoinSponsoredDataDISPLAYUSD>[] is M){
			return data.map<CoinSponsoredDataDISPLAYUSD>((e) => CoinSponsoredDataDISPLAYUSD().fromJson(e)).toList() as M;
		}	else if(<CoinData>[] is M){
			return data.map<CoinData>((e) => CoinData().fromJson(e)).toList() as M;
		}	else if(<CoinDataCoinInfo>[] is M){
			return data.map<CoinDataCoinInfo>((e) => CoinDataCoinInfo().fromJson(e)).toList() as M;
		}	else if(<CoinDataCoinInfoRating>[] is M){
			return data.map<CoinDataCoinInfoRating>((e) => CoinDataCoinInfoRating().fromJson(e)).toList() as M;
		}	else if(<CoinDataCoinInfoRatingWeiss>[] is M){
			return data.map<CoinDataCoinInfoRatingWeiss>((e) => CoinDataCoinInfoRatingWeiss().fromJson(e)).toList() as M;
		}	else if(<CoinDataRAW>[] is M){
			return data.map<CoinDataRAW>((e) => CoinDataRAW().fromJson(e)).toList() as M;
		}	else if(<CoinDataRAWUSD>[] is M){
			return data.map<CoinDataRAWUSD>((e) => CoinDataRAWUSD().fromJson(e)).toList() as M;
		}	else if(<CoinDataDISPLAY>[] is M){
			return data.map<CoinDataDISPLAY>((e) => CoinDataDISPLAY().fromJson(e)).toList() as M;
		}	else if(<CoinDataDISPLAYUSD>[] is M){
			return data.map<CoinDataDISPLAYUSD>((e) => CoinDataDISPLAYUSD().fromJson(e)).toList() as M;
		}	else if(<CoinRateLimit>[] is M){
			return data.map<CoinRateLimit>((e) => CoinRateLimit().fromJson(e)).toList() as M;
		}	else if(<XosoEntity>[] is M){
			return data.map<XosoEntity>((e) => XosoEntity().fromJson(e)).toList() as M;
		}	else if(<BongDaEntity>[] is M){
			return data.map<BongDaEntity>((e) => BongDaEntity().fromJson(e)).toList() as M;
		}	else if(<BongDaFilters>[] is M){
			return data.map<BongDaFilters>((e) => BongDaFilters().fromJson(e)).toList() as M;
		}	else if(<BongDaCompetitions>[] is M){
			return data.map<BongDaCompetitions>((e) => BongDaCompetitions().fromJson(e)).toList() as M;
		}	else if(<BongDaCompetitionsArea>[] is M){
			return data.map<BongDaCompetitionsArea>((e) => BongDaCompetitionsArea().fromJson(e)).toList() as M;
		}	else if(<BongDaCompetitionsCurrentSeason>[] is M){
			return data.map<BongDaCompetitionsCurrentSeason>((e) => BongDaCompetitionsCurrentSeason().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}