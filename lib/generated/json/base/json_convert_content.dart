// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wefinex/repository/model/bongda_entity.dart';
import 'package:wefinex/generated/json/bongda_entity_helper.dart';
import 'package:wefinex/repository/model/xoso_entity.dart';
import 'package:wefinex/generated/json/xoso_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case BongdaModelEntity:
				return bongdaModelEntityFromJson(data as BongdaModelEntity, json) as T;
			case BongdaModelFilters:
				return bongdaModelFiltersFromJson(data as BongdaModelFilters, json) as T;
			case BongdaModelCompetitions:
				return bongdaModelCompetitionsFromJson(data as BongdaModelCompetitions, json) as T;
			case BongdaModelCompetitionsArea:
				return bongdaModelCompetitionsAreaFromJson(data as BongdaModelCompetitionsArea, json) as T;
			case BongdaModelCompetitionsCurrentSeason:
				return bongdaModelCompetitionsCurrentSeasonFromJson(data as BongdaModelCompetitionsCurrentSeason, json) as T;
			case XosoEntity:
				return xosoEntityFromJson(data as XosoEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case BongdaModelEntity:
				return bongdaModelEntityToJson(data as BongdaModelEntity);
			case BongdaModelFilters:
				return bongdaModelFiltersToJson(data as BongdaModelFilters);
			case BongdaModelCompetitions:
				return bongdaModelCompetitionsToJson(data as BongdaModelCompetitions);
			case BongdaModelCompetitionsArea:
				return bongdaModelCompetitionsAreaToJson(data as BongdaModelCompetitionsArea);
			case BongdaModelCompetitionsCurrentSeason:
				return bongdaModelCompetitionsCurrentSeasonToJson(data as BongdaModelCompetitionsCurrentSeason);
			case XosoEntity:
				return xosoEntityToJson(data as XosoEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (BongdaModelEntity).toString()){
			return BongdaModelEntity().fromJson(json);
		}	else if(type == (BongdaModelFilters).toString()){
			return BongdaModelFilters().fromJson(json);
		}	else if(type == (BongdaModelCompetitions).toString()){
			return BongdaModelCompetitions().fromJson(json);
		}	else if(type == (BongdaModelCompetitionsArea).toString()){
			return BongdaModelCompetitionsArea().fromJson(json);
		}	else if(type == (BongdaModelCompetitionsCurrentSeason).toString()){
			return BongdaModelCompetitionsCurrentSeason().fromJson(json);
		}	else if(type == (XosoEntity).toString()){
			return XosoEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<BongdaModelEntity>[] is M){
			return data.map<BongdaModelEntity>((e) => BongdaModelEntity().fromJson(e)).toList() as M;
		}	else if(<BongdaModelFilters>[] is M){
			return data.map<BongdaModelFilters>((e) => BongdaModelFilters().fromJson(e)).toList() as M;
		}	else if(<BongdaModelCompetitions>[] is M){
			return data.map<BongdaModelCompetitions>((e) => BongdaModelCompetitions().fromJson(e)).toList() as M;
		}	else if(<BongdaModelCompetitionsArea>[] is M){
			return data.map<BongdaModelCompetitionsArea>((e) => BongdaModelCompetitionsArea().fromJson(e)).toList() as M;
		}	else if(<BongdaModelCompetitionsCurrentSeason>[] is M){
			return data.map<BongdaModelCompetitionsCurrentSeason>((e) => BongdaModelCompetitionsCurrentSeason().fromJson(e)).toList() as M;
		}	else if(<XosoEntity>[] is M){
			return data.map<XosoEntity>((e) => XosoEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}